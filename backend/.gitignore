__pycache__/
*.pyc
*.db
*.log
.venv/
env/
.venv/
.env
.notes.txt
.vscode/
coverage/
.pytest_cache/

üñ•Ô∏è Phase 8: Frontend Dashboard (GitHub Pages Deployment)

Goals:
	‚Ä¢ Build a lightweight public dashboard and control panel
	‚Ä¢ Visualize live GitHub activity and system performance
	‚Ä¢ Provide controls for toggling ingestion and triggering pruning

Frontend Stack:
	‚Ä¢ Vite + React + TypeScript
	‚Ä¢ Tailwind CSS + Headless UI
	‚Ä¢ Axios for HTTP requests
	‚Ä¢ Recharts or Chart.js for visualizations
	‚Ä¢ Deployed on GitHub Pages

Frontend Views to Build:
1. Dashboard View
	‚Ä¢ Live log feed (polls /logs/live-feed)
	‚Ä¢ Multi-line event type chart (PushEvent, CreateEvent, etc.)
	‚Ä¢ Latency over time graph
	‚Ä¢ Error rate visualization
	‚Ä¢ KPI cards: total logs, error %, etc.

2. Control Panel View
	‚Ä¢ Toggle GitHub Ingestor ON/OFF (POST /control/ingestor)
	‚Ä¢ Manual prune trigger (POST /control/prune)
	‚Ä¢ Optional: show task running status if API supports it

Backend Checklist:
	‚Ä¢ [ ] Implement /logs/live-feed (returns last N log events)
	‚Ä¢ [x] Implement /control/ingestor (toggle ON/OFF)
	‚Ä¢ [x] Implement /control/prune (manual prune trigger)

Integration Tasks:
	‚Ä¢ [ ] Enable CORS in FastAPI for frontend access
	‚Ä¢ [ ] Add GitHub Pages base URL to frontend .env
	‚Ä¢ [ ] Confirm Render is exposing API endpoints correctly

Deployment:
	‚Ä¢ Build frontend with Vite
	‚Ä¢ Push to GitHub repo
	‚Ä¢ Deploy via GitHub Pages